// <auto-generated />
using System;
using Amazeing;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Amazeing.Migrations
{
    [DbContext(typeof(AmazeingDbContext))]
    partial class AmazeingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Amazeing.Models.MazeInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PotentialReward")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalTiles")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Mazes");
                });

            modelBuilder.Entity("Amazeing.Models.MazeTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVisited")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Maze")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionY")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Tag")
                        .HasColumnType("INTEGER");

                    b.Property<char>("TileType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("Maze", "PositionX", "PositionY");

                    b.ToTable("MazeTiles");
                });

            modelBuilder.Entity("Amazeing.Models.PlayerState", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastDirection")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Maze")
                        .HasColumnType("TEXT");

                    b.Property<int>("PositionX")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PositionY")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("PlayerStates");
                });

            modelBuilder.Entity("MazeTileMazeTile", b =>
                {
                    b.Property<int>("MazeTileId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NeighboursId")
                        .HasColumnType("INTEGER");

                    b.HasKey("MazeTileId", "NeighboursId");

                    b.HasIndex("NeighboursId");

                    b.ToTable("MazeTileMazeTile");
                });

            modelBuilder.Entity("Amazeing.Models.MazeTile", b =>
                {
                    b.HasOne("Amazeing.Models.MazeInfo", "MazeInfo")
                        .WithMany("MazeTiles")
                        .HasForeignKey("Maze")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MazeInfo");
                });

            modelBuilder.Entity("MazeTileMazeTile", b =>
                {
                    b.HasOne("Amazeing.Models.MazeTile", null)
                        .WithMany()
                        .HasForeignKey("MazeTileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Amazeing.Models.MazeTile", null)
                        .WithMany()
                        .HasForeignKey("NeighboursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Amazeing.Models.MazeInfo", b =>
                {
                    b.Navigation("MazeTiles");
                });
#pragma warning restore 612, 618
        }
    }
}
